Now that you have some experience of creating Intellij projects, it is worth spending a bit of time exploring the related topic of *build systems*.
Introducing this concept very early on in the unit may seem a bit odd, but they are a core part of most major software projects (be they Open Source projects or in-house proprietary development work). Build systems are so important that in many big projects there is a dedicated engineer who handles build and release related tasks (look up "DevOps" if you don't believe us !).

You may have used *GNU Make* previously on this degree programme: this software saves you from having to type out the compile/link commands every time you want to build your software. `Make` takes care of running all the required build commands (as specified in the `Makefile`) and intelligently works out what needs to be done (by checking the modification times of all the files involved).

`Make` however isn't commonly used for Java development. This is partly due to the fact that building Java projects usually involve much more complicated activities than just running a set of commands. In addition to this, Java is all about creating cross-platform software - so we need to avoid the use of platform specific commands often used by `make`. For these reasons, we will instead be making use of the **Maven** build system. Take a look at the PDF document linked to above if you'd like to find out more about Maven.

In future tasks and workbooks, you will be given templates in the form of Maven projects. These contain all of the rules and dependencies required to build a project. One of the main benefits is that these projects can be imported directly into Intellij (or any other IDE for that matter). This saving us a lot of time installing required libraries and setting up the build environment.