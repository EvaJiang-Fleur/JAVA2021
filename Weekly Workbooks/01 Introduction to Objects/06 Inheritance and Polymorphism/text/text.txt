View the slides and video above to gain an understanding of the concept of **Inheritance**. Then attempt the following task which will add to your existing project. Note that the "PRO" slides and video aren't _required_ to complete this exercise, but provide some deeper and more complex information regarding the concept of inheritance for those of you who are interested (the code fragments from the "PRO" slides can be found in <a href="pro-code.zip" target="_blank">this zipfile</a>).

There are many different types of shape in the world (in addition to just triangles !). We have created a <a href="Intellij Template/" target="_blank">Maven template project</a> for you that contains a simple hierarchy of shapes including a <a href="Intellij Template/cw-shapes/src/main/java/edu/uob/Circle.java" target="_blank">Circle</a> and a <a href="Intellij Template/cw-shapes/src/main/java/edu/uob/Rectangle.java" target="_blank">Rectangle</a>. As you can see by reviewing the code for these classes, both share the same super class called
<a href="Intellij Template/cw-shapes/src/main/java/edu/uob/TwoDimensionalShape.java" target="_blank">TwoDimensionalShape</a> (from which all 2D shapes will inherit).

Download the <a href="Intellij Template/" target="_blank">Maven template project</a> and open it in Intellij. You will see that there is already a basic `Triangle` class file inside the `src` folder (you might need to hunt for it !). Once you have found the file, paste in the code that you wrote in the previous task. Then integrate the `Triangle` class into the class hierarchy by using the `extends` keyword at an appropriate place in the `Triangle` file to link it to the `TwoDimensionalShape` class.

The slides and video linked to above above also discussed the notion of **Polymorphism**. Let us explore this concept in your code: inside the project's `main` method, create a variable that can hold an instance of the `TwoDimensionalShape` class. Try to fill this variable with each type of shape in turn (`Circle`, `Rectangle` and `Triangle`). Each time, print the content of the variable - just to show what type it currently holds.