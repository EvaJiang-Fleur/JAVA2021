Any database system must be able to persistently store data
(otherwise it will lose everything each time it is restarted).
In this assignment, you will use your file system for this purpose.

Your database will consist of a number of tables, each containing a collection of rows
that store **records** (aka **entities**) - see the table near the end of this section for an example.
The first column in each table will contain a **primary key**
(which should always be called `id`). This `id` should be automatically generated by the server for each row in the table
(i.e. values will not be passed in by INSERT queries).

Relationships between entities in different tables should be
recorded using **foreign keys**. You may assume only single element keys are to be used
(i.e. you do not need to cope with "composite" keys).
Note that the `id` of an entity should NOT change at any time during the operation of the system
(once an entity has been assigned an `id` this will stay fixed for as long as that entity is kept in the database).

Each table should be stored in a separate file using TAB separated text.
A <a href="resources/people.tab" target="_blank">sample data file</a>
has been provided for you to illustrate this approach.
Note that the constructor method of the `DBServer` class takes a `File` parameter - this is a directory where your
server should store all data files. It is essential that you store ALL of your database files in that directory and nowhere outside of it.
Make sure that all files you reference in your code are _relative_ to the directory specified in the constructor - you must NOT use anything absolute (such as `/users/simon/java/db`) since this will only work on your own computer.
Note that there is further documentation in the provided test script that discusses how you can test this for yourself.

In order to load and save files to and from the file system, you will need to make use of the Java File IO API.
View the slides and video at the start of this section for an overview of these packages.
You may need to delve more deeply into the
<a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/package-summary.html" target="_blank">File IO documentation</a>
in order to implement your ideas.

As a useful starting point for this assignment, your first practical task should be to create a method that reads in data from the filesystem.
Using the sample data file provided as a source of sample data, read in the rows using appropriate classes and methods from the Java File IO API.
At this stage you need only print out the entities to the screen (in the following section you will store this data in memory in a suitable data structure).
